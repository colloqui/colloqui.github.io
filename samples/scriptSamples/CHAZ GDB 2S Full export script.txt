import subprocess
import sys
import os
import arcpy
import datetime

#NEEDS:
#If asbuilt, check if all needed values are populated.	i.e. REEL ID, INSTALLATION DATE, MEASURED LENGTHS
#Transmedia 


workorderList = {
	#!!!RUN EACH MARKET SEPARATELY!!!
	#-------------------------SAN JOSE-------------------------------------------------------------
	#'SJ_STEEL_POLE_069':{'vzwo':'SNJ_H85S_SJ_SPOLE069','exportType':'CPD'},
	#'SAN_JOSE_082' :{'vzwo':'SNJ_STKN_SJ_082','exportType':'AS-BUILT'},
	#'HWY_85_87' : {'vzwo':'SNJ_CMDH_HWY_85_87', 'exportType':'RTC'},
	#'SAN_JOSE_070' : {'vzwo':'SNJ_STKN_SJ_070', 'exportType':'AS-BUILT'},
	#'1654_THE_ALAMEDA_SC' : {'vzwo':'SNJ_STKN_1654_ALA_SC', 'exportType':'AS-BUILT'},
	#'SAN_JOSE_010' : {'vzwo':'SNJ_NWHL_SJ_010', 'exportType':'AS-BUILT'}, #NEED REEL IDs
	#'SAN_JOSE_042' : {'vzwo':'SNJ_NWHL_SJ_042', 'exportType':'AS-BUILT'}, #GOOD
	#'SAN_JOSE_070' : {'vzwo':'SNJ_STKN_SJ_070', 'exportType':'AS-BUILT'}, #good. Everything under WO SAN JOSE 071 changed to SAN JOSE 070.
	'SAN_JOSE_080' : {'vzwo':'SNJ_STKN_SJ_080', 'exportType':'RTC','market':'SNJ'},#being corrected 03.20.2019
	'SAN_JOSE_082' : {'vzwo':'SNJ_STKN_SJ_082', 'exportType':'RTC','market':'SNJ'},#being corrected 03.20.2019
	
	#-------------------------------------SAN FRAN-------------------------------------------------
	#------------------------------03192019--------------------------------------------------
	#'SAN_BRUNO_010' : {'vzwo':'SNF_SAN_BRUNO_010', 'exportType':'CPD','market':'SNF'},
	#'BRISBANE_005' : {'vzwo':'SNF_BRISBANE_005', 'exportType':'CPD','market':'SNF'},
	#'BRISBANE_002' : {'vzwo':'SNF_BRISBANE_002', 'exportType':'CPD','market':'SNF'},
	#'EDINBURG_AND_RUSSIA_SC1' : {'vzwo':'SNF_EDINBURG_AND_RUSSIA_SC1', 'exportType':'CPD','market':'SNF'},
	#'PAC_HEIGHTS_SF_PAC043' : {'vzwo':'SNF_PAC_HEIGHTS_SF_PAC043', 'exportType':'CPD','market':'SNF'},
	#'3RD_PRODUCE' : {'vzwo':'SNF_3RD_PRODUCE', 'exportType':'CPD','market':'SNF'},

	}
	
date = str(datetime.date.today().strftime('%m_%d_%Y'))
exportdate = '_' + date
#exportdate = '_02_25_19'
#date = "02_25_19"


def execute(command): #Points to OSGEO SHELL and executes commands in python window.
	os.chdir('C:\\OSGeo4W64\\bin')
	#subprocess.check_call(command,shell=True)
	process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

	# Poll process for new output until finished
	while True:
		nextline = process.stdout.readline()
		if nextline == '' and process.poll() is not None:
			break
		sys.stdout.write(nextline)
		sys.stdout.flush()

	output = process.communicate()[0]
	exitCode = process.returncode
	

def ogrCommands(WO): #WORKING 02.28.2019

	#filepath = "\\\CHCCLD01SDEV02\\d$\\GIS_team\\CO\\vz_workspace\\exports\\LLD\\{}_export_{}.gdb".format(WO,date)
	filepath = "C:\\Users\\colloqui\\Desktop\\vz_workspace\\exports\\LLD\\{}_export_{}.gdb".format(WO,date)

	ogrCMDS = [
		"""ogr2ogr -f "FileGDB" "{0}" PG:"host=10.1.5.10 user=postgres port=5432 dbname=design_tool password=postgres" sanfrancisco_2s.structure -lco GEOMETRY_NAME=geom -where "workorderid ilike '%%{1}%%'" -nln "Structure" -skipfailures""".format(filepath,WO),
		"""ogr2ogr -update -f "FileGDB" "{0}" PG:"host=10.1.5.10 user=postgres port=5432 dbname=design_tool password=postgres" sanfrancisco_2s.span -lco GEOMETRY_NAME=geom -where "workorderid ilike '%%{1}%%'" -nln "span" -skipfailures""".format(filepath,WO),
		"""ogr2ogr -update -f "FileGDB" "{0}" PG:"host=10.1.5.10 user=postgres port=5432 dbname=design_tool password=postgres" sanfrancisco_2s.transmedia -lco GEOMETRY_NAME=geom -where "workorderid ilike '%%{1}%%'" -nln "transmedia" -skipfailures""".format(filepath,WO),
		"""ogr2ogr -update -f "FileGDB" "{0}" PG:"host=10.1.5.10 user=postgres port=5432 dbname=design_tool password=postgres" sanfrancisco_2s.attachment -lco GEOMETRY_NAME=geom -where "workorderid ilike '%%{1}%%'" -nln "attachment" -skipfailures""".format(filepath,WO),
		"""ogr2ogr -update -f "FileGDB" "{0}" PG:"host=10.1.5.10 user=postgres port=5432 dbname=design_tool password=postgres" sanfrancisco_2s.spliceclosure -lco GEOMETRY_NAME=geom -where "workorderid ilike '%%{1}%%'" -nln "spliceclosure" -skipfailures""".format(filepath,WO),
		"""ogr2ogr -update -f "FileGDB" "{0}" PG:"host=10.1.5.10 user=postgres port=5432 dbname=design_tool password=postgres" sanfrancisco_2s.buildingfootprint -lco GEOMETRY_NAME=geom -where "workorderid ilike '%%{1}%%'" -nln "buildingfootprint" -skipfailures""".format(filepath,WO),
		"""ogr2ogr -update -f "FileGDB" "{0}" PG:"host=10.1.5.10 user=postgres port=5432 dbname=design_tool password=postgres" sanfrancisco_2s.equipment -lco GEOMETRY_NAME=geom -where "workorderid ilike '%%{1}%%'" -nln "equipment" -skipfailures""".format(filepath,WO),
		"""ogr2ogr -update -f "FileGDB" "{0}" PG:"host=10.1.5.10 user=postgres port=5432 dbname=design_tool password=postgres" sanfrancisco_2s.fibersplice -where "workorderid ilike '%%{1}%%'" -nln "fibersplice" -skipfailures""".format(filepath,WO),
		"""ogr2ogr -update -f "FileGDB" "{0}" PG:"host=10.1.5.10 user=postgres port=5432 dbname=design_tool password=postgres" sanfrancisco_2s.optrptrport -where "workorderid ilike '%%{1}%%'" -nln "optrptrport" -skipfailures""".format(filepath,WO),
		"""ogr2ogr -update -f "FileGDB" "{0}" PG:"host=10.1.5.10 user=postgres port=5432 dbname=design_tool password=postgres" -sql "select s.workorderid,s.fqn_id as SPAN_FQN_ID, t.fqn_id as TRANSMEDIA_FQN_ID,t.workorderid from (select workorderid, fqn_id, wkb_geometry from sanfrancisco_2s.transmedia where workorderid = '{1}') t left join (select workorderid, fqn_id, wkb_geometry from sanfrancisco_2s.span where workorderid = '{1}') s on st_intersects(t.wkb_geometry,st_buffer(st_line_interpolate_point(st_linemerge(s.wkb_geometry),.5),.000001)) union select s.workorderid,s.fqn_id as SPAN_FQN_ID, t.fqn_id as TRANSMEDIA_FQN_ID,t.workorderid from (select workorderid, fqn_id, wkb_geometry from sanfrancisco_2s.transmedia where workorderid = '{1}') t right join (select workorderid, fqn_id, wkb_geometry from sanfrancisco_2s.span where workorderid = '{1}') s on st_intersects(t.wkb_geometry,st_buffer(st_line_interpolate_point(st_linemerge(s.wkb_geometry),.5),.000001));" -nln "Transmedia_Span_Association" -skipfailures""".format(filepath,WO), #This pulls the Transmedia Span Association table using the sql script.
		]

	for cmd in ogrCMDS:
		print "Executing command:\n"+cmd
		execute(cmd) # executes the above commands.
		
def woHierControlFile(file):
	
	with open(file,"w") as f:
		f.write(""""market":"San Jose, CA"
"vendorEmailIds":"colloqui@chcconsulting.com, kkhan@chcconsulting.com, spenser.marquiss@mastec.com, Ray.Brooks@mastec.com"
"mileStoneUpdates":"Y"
"woName":""
"buildStage":""
"designType":""
"woOverwrite":""
""")
		
def gdbControlFile(WO,file,vzwo,export):
	
	if workorderList[WO]['market'] == 'SNJ':
		with open(file, "w") as f:
			f.write(""""market":"San Jose, CA"
"vendorEmailIds":"colloqui@chcconsulting.com, kkhan@chcconsulting.com, spenser.marquiss@mastec.com, Ray.Brooks@mastec.com"
"mileStoneUpdates":"N"
"woName":"{}"
"buildStage":"{}"
"designType":"Core"
"woOverwrite":"N"
""".format(vzwo,export))

	elif workorderList[WO]['market'] == 'SNF':
		with open(file, "w") as f:
			f.write(""""market":"San Francisco, CA"
"vendorEmailIds":"colloqui@chcconsulting.com, kkhan@chcconsulting.com, spenser.marquiss@mastec.com, Ray.Brooks@mastec.com"
"mileStoneUpdates":"N"
"woName":"{}"
"buildStage":"{}"
"designType":"Core"
"woOverwrite":"N"
""".format(vzwo,export))


def gdbExport():
	
	#CREATES DELIVERABLE FOLDER FOR EACH DATE. CATEGORIZE BY LLD OR ASBUILT
	sj_folderPath = os.path.join("C://Users/colloqui/Desktop/vz_workspace/deliverables/LLD/SAN JOSE", date)
	sj_pathExists = os.path.exists(sj_folderPath)
	sf_folderPath = os.path.join("C://Users/colloqui/Desktop/vz_workspace/deliverables/LLD/SAN FRANCISCO", date)
	sf_pathExists = os.path.exists(sf_folderPath)
	
	#Check if folder path exists for SAN JOSE and create if false.
	if sj_pathExists is False:
		print "Folder Path for SAN JOSE does not exist.	Creating folder path:\n" + sj_folderPath + "\n With today's date: " + date
		os.makedirs(sj_folderPath)
	else:
		print "Folder path exists: " + date
	
	#Check if folder path exists for SAN FRANCISCO and create if false.
	if sf_pathExists is False:
		print "Folder Path for SAN FRANCISCO does not exist.	Creating folder path:\n" + sf_folderPath + "\n With today's date: " + date
		os.makedirs(sf_folderPath)
	else:
		print "Folder path exists: " + date
	
	#Runs ogr2ogr commands to export features from CGIS
	for WO in workorderList:
		print "Running ogr2ogr for " + WO
		ogrCommands(WO)
		
	# delete old scratch gdb
	if arcpy.Exists("C:/Users/colloqui/Desktop/vz_workspace/python/test" + ".gdb"):
		print "\ntest.gdb exists and is being replaced...\n"
		arcpy.Delete_management("C:/Users/colloqui/Desktop/vz_workspace/python/test" + ".gdb")

	#Creates new scratch GDB
	arcpy.CreateFileGDB_management("C:/Users/colloqui/Desktop/vz_workspace/python", "test.gdb")
	
	#Begins Work Order GDB export
	for WO in workorderList:

		workorderid2 = workorderList[WO]['vzwo'] #This is the VZ WOID
		workorderExpType = workorderList[WO]['exportType'] #AS-BUILT, RTC, LLD
		
		print("\nStarting export for " + WO)
		
		#Create deliverable folder for each date. Categorize by LLD or ASBUILT
		

		#copy template GDB with workorderid name
		print "Copying template GDB with work order ID name...\n"
		arcpy.env.workspace = "C:/Users/colloqui/Desktop/vz_workspace"
		arcpy.Copy_management("C:/Users/colloqui/Desktop/vz_workspace/templates/GDB2S_Schema_LLD_Released_03Jan_V1.gdb", "C:/Users/colloqui/Desktop/vz_workspace/deliverables/LLD/" + os.sep + workorderid2 + ".gdb")

		table = "C:/Users/colloqui/Desktop/vz_workspace/exports/LLD/" + WO + "_export" + exportdate

		#replace workorderid value with workorderid2 value
		print "Replacing work order ID values...\n"
		arcpy.CalculateField_management(in_table= table + ".gdb/Attachment",field="WORKORDERID",expression="'{}'".format(workorderid2),expression_type="PYTHON_9.3",code_block="#")
		arcpy.CalculateField_management(in_table= table + ".gdb/BuildingFootprint",field="WORKORDERID",expression="'{}'".format(workorderid2),expression_type="PYTHON_9.3",code_block="#")
		arcpy.CalculateField_management(in_table= table + ".gdb/Equipment",field="WORKORDERID",expression="'{}'".format(workorderid2),expression_type="PYTHON_9.3",code_block="#")
		arcpy.CalculateField_management(in_table= table + ".gdb/Span",field="WORKORDERID",expression="'{}'".format(workorderid2),expression_type="PYTHON_9.3",code_block="#")
		arcpy.CalculateField_management(in_table= table + ".gdb/SpliceClosure",field="WORKORDERID",expression="'{}'".format(workorderid2),expression_type="PYTHON_9.3",code_block="#")
		arcpy.CalculateField_management(in_table= table + ".gdb/Structure",field="WORKORDERID",expression="'{}'".format(workorderid2),expression_type="PYTHON_9.3",code_block="#")
		arcpy.CalculateField_management(in_table= table + ".gdb/Transmedia",field="WORKORDERID",expression="'{}'".format(workorderid2),expression_type="PYTHON_9.3",code_block="#")
		arcpy.CalculateField_management(in_table= table + ".gdb/FIBERSPLICE",field="WORKORDERID",expression="'{}'".format(workorderid2),expression_type="PYTHON_9.3",code_block="#")
		arcpy.CalculateField_management(in_table= table + ".gdb/OptRptrPort",field="WORKORDERID",expression="'{}'".format(workorderid2),expression_type="PYTHON_9.3",code_block="#")
		arcpy.CalculateField_management(in_table= table + ".gdb/Transmedia_Span_Association",field="WORKORDERID",expression="'{}'".format(workorderid2),expression_type="PYTHON_9.3",code_block="#")



		#copy features from export to template
		print ("Copying features from export to template...\n")
		arcpy.Append_management(inputs= table + ".gdb/Attachment", target="C:/Users/colloqui/Desktop/vz_workspace/deliverables/LLD" + os.sep + workorderid2 + ".gdb" + os.sep + "TelecomDataset/Attachment", schema_type="NO_TEST", field_mapping="", subtype="")
		arcpy.Append_management(inputs= table + ".gdb/BuildingFootprint", target="C:/Users/colloqui/Desktop/vz_workspace/deliverables/LLD" + os.sep + workorderid2 + ".gdb" + os.sep + "TelecomDataset/BuildingFootPrint", schema_type="NO_TEST", field_mapping="", subtype="")
		arcpy.Append_management(inputs= table + ".gdb/Equipment", target="C:/Users/colloqui/Desktop/vz_workspace/deliverables/LLD" + os.sep + workorderid2 + ".gdb" + os.sep + "TelecomDataset/Equipment", schema_type="NO_TEST", field_mapping="", subtype="")
		arcpy.Append_management(inputs= table + ".gdb/Span", target="C:/Users/colloqui/Desktop/vz_workspace/deliverables/LLD" + os.sep + workorderid2 + ".gdb" + os.sep + "TelecomDataset/Span", schema_type="NO_TEST", field_mapping="", subtype="")
		arcpy.Append_management(inputs= table + ".gdb/SpliceClosure", target="C:/Users/colloqui/Desktop/vz_workspace/deliverables/LLD" + os.sep + workorderid2 + ".gdb" + os.sep + "TelecomDataset/SpliceClosure", schema_type="NO_TEST", field_mapping="", subtype="")
		arcpy.Append_management(inputs= table + ".gdb/Structure", target="C:/Users/colloqui/Desktop/vz_workspace/deliverables/LLD" + os.sep + workorderid2 + ".gdb" + os.sep + "TelecomDataset/Structure", schema_type="NO_TEST", field_mapping="", subtype="")
		arcpy.Append_management(inputs= table + ".gdb/Transmedia", target="C:/Users/colloqui/Desktop/vz_workspace/deliverables/LLD" + os.sep + workorderid2 + ".gdb" + os.sep + "TelecomDataset/Transmedia", schema_type="NO_TEST", field_mapping="", subtype="")
		arcpy.Append_management(inputs= table + ".gdb/FIBERSPLICE", target="C:/Users/colloqui/Desktop/vz_workspace/deliverables/LLD" + os.sep + workorderid2 + ".gdb" + os.sep + "FIBERSPLICE", schema_type="NO_TEST", field_mapping="", subtype="")
		arcpy.Append_management(inputs= table + ".gdb/OptRptrPort", target="C:/Users/colloqui/Desktop/vz_workspace/deliverables/LLD" + os.sep + workorderid2 + ".gdb" + os.sep + "OptRptrPort", schema_type="NO_TEST", field_mapping="", subtype="")
		arcpy.Append_management(inputs= table + ".gdb/Transmedia_Span_Association", target="C:/Users/colloqui/Desktop/vz_workspace/deliverables/LLD" + os.sep + workorderid2 + ".gdb" + os.sep + "Transmedia_Span_Association", schema_type="NO_TEST", field_mapping="", subtype="")
		
		print("***GDB Export for " + WO + " complete***")
		
		print("Creating Control file for " + WO)
		
		if workorderList[WO]['market'] == 'SNJ':
			ctrlFile = os.path.join(sj_folderPath, workorderid2 + ".gdb.txt")
			gdbControlFile(WO,ctrlFile,workorderid2,workorderExpType)		
		elif workorderList[WO]['market'] == 'SNF':
			ctrlFile = os.path.join(sf_folderPath, workorderid2 + ".gdb.txt")
			gdbControlFile(WO,ctrlFile,workorderid2,workorderExpType)
			
	print("\n***GDB exports completed***\n")
	#EVERYTHING BEFORE THIS LINE WORKS-------------------------------------------

	
	
def wo_hier_create():
	#sets up the query for the WO Hierarchy gdb
	
	
	#query = ""
	#query += "internal_work_id ILIKE '{}' and isdeleted = 'f'".format(list(workorderList)[0])
	#workorderList.pop(list(workorderList)[0])
	for WO in workorderList:
		if WO == list(workorderList)[0]:
			query = "a.internal_work_id ILIKE '%{}%' and isdeleted = 'f'".format(list(workorderList)[0])
			#query = "vendor_wo_id ILIKE '%{}%'".format(list(workorderList)[0])
		else:
			query += " or a.internal_work_id ILIKE '%{}%' and isdeleted = 'f' ".format(WO)
			#query += " or vendor_wo_id ILIKE '%{}%' ".format(WO)
	

	if arcpy.Exists(r"C:\Users\colloqui\Desktop\vz_workspace\deliverables\LLD\WO_HIERARCHY.gdb"):
		print "WO_HIERARCHY.gdb LIVES!"
	else:
		arcpy.Copy_management("C:/Users/colloqui/Desktop/vz_workspace/templates/WO_HIERARCHY.gdb", "C:/Users/colloqui/Desktop/vz_workspace/deliverables/LLD/WO_HIERARCHY.gdb")

		targetGDB = "C:/Users/colloqui/Desktop/vz_workspace/deliverables/LLD/WO_HIERARCHY.gdb"
		
		#OLD METHOD	#arcpy.FeatureClassToFeatureClass_conversion(in_features="C:/Data/CGIS/connections/designtool_prod_postgres.sde/design_tool.sanfrancisco.work_order_polygon", out_path="C:/Users/colloqui/Desktop/vz_workspace/python/test.gdb", out_name="WO_HIERARCHY", where_clause="{}".format(query), field_mapping="", config_keyword="")
		
		
		#THIS SQL UTILIZES THE sanfrancisco.chc_to_vz_woid TABLE IN ORDER TO POPULATE THE WO_HIERARCHY.gdb
		f2fOGR = """ogr2ogr -update -append -f "FileGDB" "{}" PG:"host=10.1.5.10 user=postgres port=5432 dbname=design_tool password=postgres" -sql "select c.vzwoid as "VENDOR_WO_ID", b.vzwoid as "PARENT_WRK_ORDER_ID", c.nfid as "NFID",'N' as "ISFDA", 'Y' as "ISSUBFDA",a.wkb_geometry from sanfrancisco.work_order_polygon a join sanfrancisco.chc_to_vz_woid c on a.internal_work_id = c.chcwoid left join sanfrancisco.chc_to_vz_woid b on a.parent_wrk_order_id = b.chcwoid where {};" -nln "WO_HIERARCHY" -skipfailures""".format(targetGDB,query)
		
		print "running ogr2ogr for WO_HIERARCHY...\n" + f2fOGR
		execute(f2fOGR)
		
		
		#OLD METHOD	#arcpy.Append_management(inputs="C:/Users/colloqui/Desktop/vz_workspace/python/test.gdb/WO_HIERARCHY1", target=targetGDB, schema_type="NO_TEST", field_mapping='PARENT_WRK_ORDER_ID "PARENT_WRK_ORDER_NAME" true true false 50 Text 0 0 ,First,#,WO_HIERARCHY,parent_wrk_order_id,-1,-1;WO_LOCATION_CODE "WO_LOCATION_CODE" true true false 50 Text 0 0 ,First,#;WO_DESCRIPTION "WO_DESCRIPTION" true true false 50 Text 0 0 ,First,#;VENDOR_WO_ID "VENDOR_WO_NAME" true true false 50 Text 0 0 ,First,#,WO_HIERARCHY,internal_work_id,-1,-1;OPERATION_TYPE "OPERATION_TYPE" true true false 50 Text 0 0 ,First,#;NFID "NFID" true true false 50 Text 0 0 ,First,#;SHAPE_Length "SHAPE_Length" false true true 8 Double 0 0 ,First,#,WO_HIERARCHY,Shape_Length,-1WT,-1;SHAPE_Area "SHAPE_Area" false true true 8 Double 0 0 ,First,#,WO_HIERARCHY,Shape_Area,-1,-1;ISFDA "ISFDA" true true false 1 Text 0 0 ,First,#;ISSUBFDA "ISSUBFDA" true true false 1 Text 0 0 ,First,#', subtype="")
		
		
		print("***WO HIERARCHY GDB created***")
		#write Control File
		print("Writing WO HIERARCHY control file...")
		woHierFile = 'C:/Users/colloqui/Desktop/vz_workspace/deliverables/LLD/WO_HIERARCHY.gdb.txt'
		woHierControlFile(woHierFile)


	
def main():
	gdbExport()
	wo_hier_create()

if __name__ == '__main__':
	main()
